{"version":3,"sources":["components/AddContactForm/AddContactForm.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AddContactForm","state","contactName","contactSurname","error","preventSubmit","event","preventDefault","_this","props","addContactFunction","setState","Error","handleNameChange","target","value","handleSurnameChange","react_default","a","createElement","onSubmit","this","onChange","message","Component","App","contacts","JSON","parse","localStorage","getItem","addContact","name","surname","concat","id","Date","now","removeContact","contactId","filter","contact","setItem","stringify","_this2","components_AddContactForm_AddContactForm","map","key","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwDeA,6MAnDbC,MAAQ,CACNC,YAAa,GACbC,eAAgB,GAChBC,MAAO,QAITC,cAAgB,SAAAC,GACdA,EAAMC,iBACyB,KAA3BC,EAAKP,MAAMC,aAAoD,KAA9BM,EAAKP,MAAME,gBAMhDK,EAAKC,MAAMC,mBAAmBF,EAAKP,MAAMC,YAAaM,EAAKP,MAAME,gBACjEK,EAAKG,SAAS,CAAET,YAAa,GAAIC,eAAgB,GAAIC,MAAO,QAN1DI,EAAKG,SAAS,CACZP,MAAO,IAAIQ,MAAM,6BAQvBC,iBAAmB,SAAAP,GACjBE,EAAKG,SAAS,CACZT,YAAaI,EAAMQ,OAAOC,WAI9BC,oBAAsB,SAAAV,GACpBE,EAAKG,SAAS,CACZR,eAAgBG,EAAMQ,OAAOC,iFAK/B,OACEE,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKhB,eACnBY,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,SAAOJ,MAAOM,KAAKpB,MAAMC,YAAaoB,SAAUD,KAAKR,oBAGrDI,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAOJ,MAAOM,KAAKpB,MAAME,eAAgBmB,SAAUD,KAAKL,uBAGxDC,EAAAC,EAAAC,cAAA,qBAEEE,KAAKpB,MAAMG,OAASa,EAAAC,EAAAC,cAAA,YAAOE,KAAKpB,MAAMG,MAAMmB,iBA9CzBC,aCqDdC,oNAnDbxB,MAAQ,CACNyB,SAAUC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,SAG3DC,WAAa,SAACC,EAAMC,GAClBzB,EAAKG,SAAS,CACZe,SAAUlB,EAAKP,MAAMyB,SAASQ,OAAO,CACnCC,GAAIC,KAAKC,MACTL,KAAMA,EACNC,QAASA,SAKfK,cAAgB,SAAAC,GACd/B,EAAKG,SAAS,CACZe,SAAUlB,EAAKP,MAAMyB,SAASc,OAC5B,SAAAC,GAAO,OAAIF,IAAcE,EAAQN,4FAMrCN,aAAaa,QAAQ,WAAYf,KAAKgB,UAAUtB,KAAKpB,MAAMyB,4CAGpD,IAAAkB,EAAAvB,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC0B,EAAD,CAAgBnC,mBAAoBW,KAAKU,aACzCd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAEEE,KAAKpB,MAAMyB,SAASoB,IAClB,SAAAL,GAAO,OACLxB,EAAAC,EAAAC,cAAA,OAAK4B,IAAKN,EAAQN,GAAIa,UAAY,eAChC/B,EAAAC,EAAAC,cAAA,kBAAAe,OAAaO,EAAQT,OACrBf,EAAAC,EAAAC,cAAA,qBAAAe,OAAgBO,EAAQR,UACxBhB,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAML,EAAKN,cAAcG,EAAQN,MAAlD,mCAxCAX,cCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b24e2552.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass AddContactForm extends Component {\n\n  state = {\n    contactName: '',\n    contactSurname: '',\n    error: null,\n\n  }\n\n  preventSubmit = event => {\n    event.preventDefault();\n    if (this.state.contactName === '' || this.state.contactSurname === '') {\n      this.setState({\n        error: new Error('Fields cant be empty')\n      })\n      return;\n    }\n    this.props.addContactFunction(this.state.contactName, this.state.contactSurname);\n    this.setState({ contactName: '', contactSurname: '', error: null});\n  }\n\n  handleNameChange = event => {\n    this.setState({\n      contactName: event.target.value\n    })\n  }\n\n  handleSurnameChange = event => {\n    this.setState({\n      contactSurname: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.preventSubmit}>\n        <p>Name\n        <input value={this.state.contactName} onChange={this.handleNameChange} />\n\n        </p>\n        <p>Surname\n        <input value={this.state.contactSurname} onChange={this.handleSurnameChange} />\n\n        </p>\n        <button>ADD</button>\n        {\n          this.state.error && <span>{this.state.error.message}</span>\n        }\n      </form>\n    )\n  }\n}\n\nexport default AddContactForm","import React, { Component } from 'react';\nimport AddContactForm from '../AddContactForm/AddContactForm';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: JSON.parse(localStorage.getItem('contacts') || '[]')\n  }\n\n  addContact = (name, surname) => {\n    this.setState({\n      contacts: this.state.contacts.concat({\n        id: Date.now(),\n        name: name,\n        surname: surname\n      })\n    })\n  }\n\n  removeContact = contactId => {\n    this.setState({\n      contacts: this.state.contacts.filter(\n        contact => contactId !== contact.id\n      )\n    })\n  }\n\n  componentDidUpdate(){\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Contact List App</h1>\n        <AddContactForm addContactFunction={this.addContact}/>\n        <div>\n          <h3>Contact List</h3>\n          {\n            this.state.contacts.map(\n              contact => (\n                <div key={contact.id} className = 'contactItem'>\n                  <p>{`Name: ${contact.name}`}</p>\n                  <p>{`Surname: ${contact.surname}`}</p> \n                  <button onClick={() => this.removeContact(contact.id)}>Remove this contact</button>\n                </div>\n              )\n            )\n          }\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}