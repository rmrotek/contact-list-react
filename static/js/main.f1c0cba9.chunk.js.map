{"version":3,"sources":["components/AddContactForm/AddContactForm.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AddContactForm","state","contactName","contactSurname","error","preventSubmit","event","preventDefault","_this","props","addContactFunction","setState","Error","handleNameChange","target","value","match","handleSurnameChange","react_default","a","createElement","className","onSubmit","this","message","type","placeholder","onChange","Component","App","contacts","JSON","parse","localStorage","getItem","addContact","name","surname","concat","id","Date","now","removeContact","contactId","filter","contact","setItem","stringify","_this2","components_AddContactForm_AddContactForm","map","key","onClick","Boolean","window","location","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1c0cba9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddContactForm.css'\r\n\r\n\r\nclass AddContactForm extends Component {\r\n\r\n  state = {\r\n    contactName: '',\r\n    contactSurname: '',\r\n    error: null,\r\n\r\n  }\r\n\r\n  preventSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.state.contactName === '' || this.state.contactSurname === '') {\r\n      this.setState({\r\n        error: new Error('Fields cant be empty')\r\n      })\r\n      return;\r\n    }\r\n    this.props.addContactFunction(this.state.contactName, this.state.contactSurname);\r\n    this.setState({ contactName: '', contactSurname: '', error: null });\r\n  }\r\n\r\n  handleNameChange = event => {\r\n    if(event.target.value.match(/^[a-ząśżźćęółń]+$/i)) {\r\n      this.setState({\r\n        contactName: event.target.value\r\n      })\r\n    } else {\r\n      return this.setState({error: new Error('Can only enter letters')})\r\n    }\r\n    \r\n  }\r\n\r\n  handleSurnameChange = event => {\r\n    if(event.target.value.match(/^[a-ząśżźćęółń]+$/i)) {\r\n      this.setState({\r\n        contactSurname: event.target.value\r\n      })\r\n    } else {\r\n      return this.setState({error: new Error('Can only enter letters')})\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='form-container'>\r\n        <form onSubmit={this.preventSubmit} >\r\n          <p className='form-error'>\r\n            {\r\n              this.state.error && <span>{this.state.error.message}</span>\r\n            }\r\n          </p>\r\n          <p>\r\n            <input type='text' placeholder='Enter name here' value={this.state.contactName} onChange={this.handleNameChange} />\r\n\r\n          </p>\r\n          <p>\r\n            <input placeholder='Enter surname here' value={this.state.contactSurname} onChange={this.handleSurnameChange} />\r\n\r\n          </p>\r\n          <button>ADD</button>\r\n\r\n\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddContactForm","import React, { Component } from 'react';\r\nimport AddContactForm from '../AddContactForm/AddContactForm';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: JSON.parse(localStorage.getItem('contacts') || '[]')\r\n  }\r\n\r\n  addContact = (name, surname) => {\r\n    this.setState({\r\n      contacts: this.state.contacts.concat({\r\n        id: Date.now(),\r\n        name: name,\r\n        surname: surname\r\n      })\r\n    })\r\n  }\r\n\r\n  removeContact = contactId => {\r\n    this.setState({\r\n      contacts: this.state.contacts.filter(\r\n        contact => contactId !== contact.id\r\n      )\r\n    })\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='main-container'>\r\n        <h1 className='main-header'>Contact List App</h1>\r\n        <AddContactForm addContactFunction={this.addContact} />\r\n        <div className='contact-list-container'>\r\n          <h3 className='contact-list-header'>Contact List</h3>\r\n          <div className='contact-list'>\r\n            {\r\n              this.state.contacts.map(\r\n                contact => (\r\n                  <div key={contact.id} className='contact-item'>\r\n                    <div className='contact-item-data'>\r\n                      <p>{`Name: ${contact.name}`}</p>\r\n                      <p>{`Surname: ${contact.surname}`}</p>\r\n                    </div>\r\n\r\n                    <button className='contact-item-button' onClick={() => this.removeContact(contact.id)}>Remove this contact</button>\r\n                  </div>\r\n                )\r\n              )\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}